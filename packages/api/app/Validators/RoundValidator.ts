import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';
import { schema, rules } from '@ioc:Adonis/Core/Validator';

export default class RoundValidator {
  constructor(private ctx: HttpContextContract) {}

  public schema = schema.create({
    question: schema.string({ trim: true }, [rules.maxLength(500)]),
    answers: schema.array([rules.distinct('answer')]).members(
      schema.object().members({
        prefix: schema.string.optional({ trim: true }, [rules.maxLength(20)]),
        answer: schema.string({ trim: true }, [rules.maxLength(80)]),
      }),
    ),
    themeId: schema.number([rules.exists({ table: 'themes', column: 'id' })]),
    difficultyId: schema.number([rules.exists({ table: 'difficulties', column: 'id' })]),
  });

  public cacheKey = this.ctx.routeKey;

  public messages = {
    'question.required': 'Question manquante',
    'question.maxLength': 'La reponse ne doit pas faire plus de {{ options.maxLength }} caract√®res',
    'answers.required': 'R√©ponse manquante',
    'answers.maxLength': 'La reponse ne doit pas faire plus de {{ options.maxLength }} caract√®res',
    'answers.distinct': 'Les r√©ponses doivent √™tre diff√©rentes',
    'answers.*.answer.required': 'Un champ r√©ponse ne peut pas √™tre vide',
    'answers.*.answer.maxLength':
      'Les r√©ponse ne peuvent pas faire plus de {{ options.maxLength }} caract√®res',
    'answers.*.prefix.maxLength':
      'Les pr√©fix ne peuvent pas faire plus de {{ options.maxLength }} caract√®res',
    'themeId.required': 'Th√®me manquant',
    'themeId.exists': "Le th√®me s√©lectionn√© n'existe pas ü§î",
    'difficultyId.required': 'Difficult√© manquante',
    'difficultyId.exists': "La difficult√© s√©lectionn√©e n'existe pas ü§î",
  };
}
